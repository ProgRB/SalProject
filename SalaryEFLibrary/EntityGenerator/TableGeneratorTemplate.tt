<#@ template hostspecific="true" language="C#"#>
<#@ output extension=".cs"#>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#
    string file_name= this.Host.ResolvePath("DbXmlData.xml");
#>
/***********************************************************/
/**********   Generated at <#=DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")#>     ********/
/*********************************************************/
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Data;
using Oracle.DataAccess.Client;
using System.Data.Linq.Mapping;

namespace EntityGenerator
{
    <# 
    XmlDocument doc= new XmlDocument();
    doc.Load(file_name);
    XmlNodeList nodes =  doc.DocumentElement.SelectNodes("/Tables/Table");
    foreach (XmlNode n in nodes.Cast<XmlNode>().OrderBy(r=>new Tuple<string, string>(r.Attributes["SchemaName"]?.InnerText, r.Attributes["Name"]?.InnerText)))
    {
        ClearIndent();
        PushIndent("    ");
        PushComment(n);
        WriteLine("");
        string schName=string.Format("SchemaName(\"{0}\")", n.Attributes["SchemaName"]==null? "":n.Attributes["SchemaName"].InnerText);
		string tableName = n.Attributes["Name"].InnerText;
        WriteLine(string.Format("[{0}, {1}]", string.Format("Table(Name=\"{0}\")", tableName), schName));
#>
public partial class <#=GetFormattedName(n.Attributes["Name"].InnerText)#> : RowEntityBase
{
<#        PushIndent("    ");#>
#region Class Members
<# 
    foreach (XmlNode inner in n.ChildNodes)
    { 
        if (inner.Name=="Column")
        {
			string columnName = inner.Attributes["Name"].InnerText.ToUpper();
		#>
<# PushComment(inner);#>
<#PushAttributtes(inner); #>

public <#= GetColumnType(inner)#> <#= GetFormattedName(columnName) #>
{
    get
    {
		return GetDataRowField<<#= GetColumnType(inner)#>>("<#= columnName #>");
        //return this.GetDataRowField<<#= GetColumnType(inner)#>>(() => <#= GetFormattedName(columnName) #>);
    }
    set
    {
        UpdateDataRow<<#= GetColumnType(inner)#>>(() => <#= GetFormattedName(columnName) #>, value);
    }
}
<#
        }
   }
PopIndent();                                           
#>
    #endregion
	
	#region Adapter region contructor
	public override void InitializeAdapter()
	{
	<#
	PushIndent("    ");
	#>
	DataAdapter = new OracleDataAdapter();
	_dataAdapter.InsertCommand = new OracleCommand(@<#Write(GetProcedureUpdate(n, tableName));#>, CurConnect);
	_dataAdapter.InsertCommand.BindByName = true;
	_dataAdapter.InsertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
	<#
	PushIndent("    ");
	foreach (XmlNode inner in n.ChildNodes)
	{
		PushColumnAdapter("InsertCommand", inner.Attributes["Name"].InnerText, inner, IsPrimaryKey(inner, tableName));
    }
	WriteLine("");
	PopIndent();
	#>
	_dataAdapter.UpdateCommand = new OracleCommand(@<#Write(GetProcedureUpdate(n, tableName));#>, CurConnect);
	_dataAdapter.UpdateCommand.BindByName = true;
	_dataAdapter.UpdateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
	<#
	PushIndent("    ");
	foreach (XmlNode inner in n.ChildNodes)
	{
		PushColumnAdapter("UpdateCommand", inner.Attributes["Name"].InnerText, inner,  IsPrimaryKey(inner, tableName));
    }
	WriteLine("");
	PopIndent();
	#>
	_dataAdapter.DeleteCommand = new OracleCommand(@<#Write(GetProcedureDelete(n, tableName));#>, CurConnect);
	_dataAdapter.DeleteCommand.BindByName = true;
	<#
	foreach (XmlNode inner in n.ChildNodes.Cast<XmlNode>().Where(r=>IsPrimaryKey(r, tableName)))
	{
		PushColumnAdapter("DeleteCommand", inner.Attributes["Name"].InnerText, inner, false);
    }
	PopIndent();
	PopIndent();
	#>
	}
		
	#endregion
<#        ClearIndent();#>
    }
<#
    ClearIndent();
        WriteLine("");
}
    #>
}
<#+
string GetFormattedName(string name)
{
        if (string.IsNullOrEmpty(name)) 
            Error("Не задано имя, ошибка");
        string[] s = name.Split(new char[]{'_'}, StringSplitOptions.RemoveEmptyEntries);
        return string.Join(string.Empty, s.Select(r=>(r.ToLower()=="id"?"ID":FirstCapChar(r))).ToArray());
        return "dafds";
}#>
<#+
string GetColumnType(XmlNode n){
        Type type = Type.GetType(n.Attributes["Type"].InnerText);
        if (!type.IsValueType || Nullable.GetUnderlyingType(type) != null) return type.Name;
        return type.Name+"?";
}#>
<#+ void PushAttributtes(XmlNode n)
    {
        Write(string.Format("[Column({0})]",
                string.Join(", ", new string[]{
                string.Format("Name=\"{0}\"", n.Attributes["Name"].InnerText), 
                (n.Attributes["Nullable"]==null || n.Attributes["Nullable"].InnerText.ToUpper()=="TRUE"? "":"CanBeNull=false"),
                (n.Attributes["IsPrimaryKey"]==null ||n.Attributes["IsPrimaryKey"].InnerText.ToUpper()=="FALSE"? "":"IsPrimaryKey=true")}.Where(r=>!string.IsNullOrEmpty(r))))
            );
    }
 #>
<#+
string FirstCapChar(string s)
    {
  if (string.IsNullOrEmpty(s))
    return string.Empty;
  else
    return s.Substring(0,1).ToUpper()+s.Substring(1).ToLower();
}#>
<#+
    void PushComment(XmlNode n)
    {
        if (n.Attributes["Comment"]!=null)
        {
            WriteLine("/// <summary>");
			WriteLine("/// "+n.Attributes["Comment"].InnerText);
			WriteLine("/// </summary>");
        }
    }
#>
<#+
void PushColumnAdapter(string command, string name, XmlNode node, bool is_primary = false)
{
	string direction = is_primary?".Direction = ParameterDirection.InputOutput":"";
	WriteLine($"_dataAdapter.{command}.Parameters.Add(\"p_{name}\", OracleDbType.{GetOracleDBType(node)}, 0, \"{name}\"){direction};");
	if (is_primary && GetOracleDBType(node)=="Decimal")
	WriteLine($"_dataAdapter.{command}.Parameters[\"p_{name}\"].DbType = DbType.{GetOracleDBType(node)};");
}
#>
<#+
string GetOracleDBType(XmlNode n)
{
	switch (n.Attributes.Cast<XmlAttribute>().Where(r=>r.Name.ToUpper()=="DBTYPE").FirstOrDefault().InnerText.ToUpper())
    {
		case "VARCHAR2": return "Varchar2";
		case "BLOB": return "Blob";
		case "NUMBER": return "Decimal";
		case "DATE": return "Date";
		default: return "Varchar2";
    }
}
#>

<#+ 
bool IsPrimaryKey(XmlNode n, string table_name)
{
	string cn = n.Attributes["Name"].InnerText.ToUpper();
	if (cn.Length>2) 
		cn = cn.Substring(0, cn.Length-3);
	return n.Attributes["IsPrimaryKey"]!=null && n.Attributes["IsPrimaryKey"].InnerText.ToUpper()=="TRUE" || table_name.ToUpper()==cn;
	return true;
}
#>

<#+
string GetProcedureUpdate(XmlNode n, string table_name)
{
	string cols = string.Join(", ", n.ChildNodes.Cast<XmlNode>().Select(p=>$"p_{p.Attributes["Name"].InnerText}=>:p_{p.Attributes["Name"].InnerText}").ToArray());
	string schema = n.Attributes["SchemaName"]==null? "БЛАБЛАНЕТСХЕМЫ":n.Attributes["SchemaName"].InnerText;
	return $"\"BEGIN {schema}.{table_name}_UPDATE({cols});END;\"";
	return cols;
}
#>

<#+
string GetProcedureDelete(XmlNode n, string table_name)
{
	string schema = n.Attributes["SchemaName"]==null? "БЛАБЛАНЕТСХЕМЫ":n.Attributes["SchemaName"].InnerText;
	string prColName= n.ChildNodes.Cast<XmlNode>().Where(p=>IsPrimaryKey(p, table_name)).Select(p=>p.Attributes["Name"].InnerText).FirstOrDefault();
	return $"\"BEGIN {schema}.{table_name}_DELETE(p_{prColName} => :p_{prColName});END;\"";
	return schema;
}
#>
